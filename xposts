#!/usr/bin/perl

# Copyright (c) 2022-2024 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use utf8;
use open qw/:std :utf8/;

use Data::Dumper;
use Date::Manip;
use Getopt::Std;
use POSIX qw(strftime);
use ReadConf;
use Sys::Syslog;
use X::API;
use JSON;
use MIME::Base64;
use Storable;
use Digest::SHA1 qw(sha1_hex);
use Graphics::Magick;
use File::MMagic;

my $ident = "Xposts";
my $logopt = 'pid';
my $facility = 'user';

our $cachedir = $ENV{'HOME'}."/.cache/xposts";
our $magic;
mkdir($ENV{'HOME'}.".cache") if ! -d $ENV{'HOME'}."/.cache";
mkdir($cachedir) if ! -d $cachedir;
if (! -d $cachedir) {
	die "Can't create $cachedir";
}

# XXX crude global hack, think of a better solution!
#   .. the problem is if I call eval { function; };
#   .. and that function also calls eval { foo; };
#   .. and that function also calls die
#   .. the program actually dies
#   .. want to see if post replies die, then query the community_id incase thats why
our $skipeval = 0;

our $fields = { }; # ->{t} = tweet, ->{u} = user
init_fields();

our $opt_b; # shows bookmarks
our $opt_c; # config file
our $opt_j; # arbitrary v2 query to get json output
our $opt_J; # arbitrary v1 query to get json output
our $opt_l; # chase likes
our $opt_q; # quiet
our $opt_r; # desired resutls count
our $opt_s; # show users profile stats
our $opt_S; # show users profile stats
our $opt_T; # show an individual post
our $opt_v; # verbosity
our $opt_L; # show owned lists
our $opt_N; # no syslog
our $opt_O; # var=val1,val2,val3;var2=val4,val5;var3=val6
our $opt_p; # arbitrary v2 query to post json output call;var1=val1;var2=val2

our $opt_w; # write a post, $opt_w is message
our $opt_Q; #  post quote id (post id to quote)
our $opt_R; #  post reply_settings { "mentionedUsers", "followers", "everyone", "" }
our $opt_C; #  post community_id
our $opt_W; #  post reply id (post id to reply to)
our $opt_I; #  post image filename
our $opt_i; #  post image filename
our $opt_d; # write a dm message $opt_d is uid, $ARGV[0] is message
our $opt_B; # '-B postid' bookmark postid
our $opt_u; # upload a media file and get an id

our $opt_a; # generic action with argument

# defaults
$opt_b = 0;
$opt_c = $ENV{HOME}."/.config/xapi/xapi.conf";
$opt_l = 0;
$opt_L = 0;
$opt_r = 10;
$opt_s = 0;
$opt_v = 0;

getopts('a:bc:d:j:lp:qr:su:vw:B:I:J:Q:ST:LNO:W:');

if (!defined($opt_I)) {
	$opt_I = $opt_i;
}

if (!defined($opt_c)) {
	die "Config file '${opt_c}' EEXIST";
}

my $rc = ReadConf->new();
my $conf = $rc->readconf($opt_c);

my $section = "creds";

our $opts = { };
if (defined($opt_O)) {
	foreach my $opt (split(/;/,$opt_O)) {
		if ($opt =~ /^([^=]+)=(.*)$/) {
			my ($var, $val) = ($1, $2);
			$opts->{$var} = $val;
		}
	}
}

my $c = $conf->{creds};

if (!defined($c)) {
	die "[creds] not found in xapi.conf";
}

if (!defined($c->{cache_prefix})) {
	die "[creds]cache_prefix not found";
}
my $cache_prefix = $c->{cache_prefix};
$cachedir .= "/${cache_prefix}";
mkdir($cachedir);
if (! -d $cachedir) {
	die "Could not mkdir($cachedir)";
}

our $me_glob;

our $client = { };
$client->{1} = X::API->new_with_traits(
	#api_version => '1',
	#api_ext	=> '',
	traits => [ qw/ApiMethods/ ],
	#traits => [ qw/Enchilada/ ],
	agent => "v2UserLookupJS",
	consumer_key	=> $c->{consumer_key},
	consumer_secret => $c->{consumer_secret},
	access_token	=> $c->{access_token},
	access_token_secret => $c->{access_token_secret},
);
#print Dumper($client->{1});
$client->{2} = X::API->new_with_traits(
	api_version => '2',
	api_ext	=> '',
	traits => [ qw/ApiMethods/ ],
	#traits => [ qw/Enchilada/ ],
	consumer_key	=> $c->{consumer_key},
	consumer_secret => $c->{consumer_secret},
	access_token	=> $c->{access_token},
	access_token_secret => $c->{access_token_secret},
);
#print Dumper($client->{2});

our $gc = { }; # Global Cache
our $pmemcache = { }; # posts
our $mmemcache = { }; # media
our $smemcache = { }; # stats

our $v = $opt_v;

openlog($ident, $logopt, $facility);

if ($opt_s>0) {
	show_mystats();
	show_rates();
	exit(0);
}

if (defined($opt_j)) {
	my ($data, $c) = xv2("get", $opt_j );
	print Dumper($data);
	show_rates();
	exit(0);
}
if (defined($opt_J)) {
	my ($data, $c) = xv1("get", $opt_J );
	print Dumper($data);
	show_rates();
	exit(0);
}
	
	

if ($opt_b>0) {
	show_bookmarks();
	show_rates();
	exit(0);
}

if (defined($opt_T)) {
	use Try::Tiny;
	# The `expansions` query parameter value [foo] is not one of [author_id,referenced_tweets.id,referenced_tweets.id.author_id,entities.mentions.username,entities.note.mentions.username,attachments.poll_ids,attachments.media_keys,attachments.media_source_tweet,in_reply_to_user_id,geo.place_id,edit_history_tweet_ids,article.cover_media,article.media_entities]
	my $query = "tweet.fields=".$fields->{t}.
	"&expansions=author_id,entities.mentions.username,in_reply_to_user_id,referenced_tweets.id,attachments.media_keys".
	# media_fields [alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,variants,width]
	"&media.fields=url,variants,media_key,type,alt_text,duration_ms,public_metrics".
	# user.fields [created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,verified_type,withheld]
	"&user.fields=username,withheld,protected,created_at,public_metrics,verified,verified_type";
	#$query = "tweet.fields=lang,author_id,attachments,created_at,public_metrics&user.fields=created_at";
	#$query = "tweet.fields=created_at&expansions=author_id&user.fields=created_at";
	foreach my $t (split(/\s+,\s+/,$opt_T)) {
		my ($posts, $context);

		($posts, $context) = xv2("get","posts?ids=${t}&$query");
		print expand_tweet(0, $posts);
	}
	show_rates();
	exit(0);
}

if (defined($opt_u)) {
	my $file = $opt_u;
	if (! -f $file ) {
		die "file $file EEXISTS";
	}
	my $mdata = file_to_mediaid( $file );
	
	printf "media_id=%s name=%s\n", $mdata->{media_id}, $file;
	show_rates();
	exit(0);
}
if (defined($opt_a)) {
	if ($opt_a eq "like") {
		like(@ARGV);
		exit(0);
	}
	if ($opt_a eq "desc") {
		desc(@ARGV);
		exit(0);
	}
	if ($opt_a eq "uinfo") {
		my $data = uinfo();
		print Dumper($data);
		show_rates();
		exit(0);
	}
	die "unknown action ${opt_a}";
}
if (defined($opt_w)) {
	my $msg = $opt_w;
	my $req = {
			text => $msg,
	};
	if (defined($opt_W)) {
		my $reply = {
			"in_reply_to_tweet_id" => $opt_W,
		};
		$req->{"reply"} = $reply;
	} elsif (defined($opt_Q)) {
		$req->{"quote_tweet_id"} = $opt_Q;
	}
	if (defined($opt_C)) {
		$req->{"community_id"} = $opt_C;
	}
	if (defined($opt_R)) {
		$req->{"reply_settings"} = $opt_R;
	}
	# $opt_I syntax:
	# <img> = foo.jpg[="alternate text"]
	# list = <img>[,<img>...]
	# 
	if (defined($opt_I)) {
		my @ids;
		my ($mdata, $mstr, $mid);
		foreach my $img (split(/,/, $opt_I)) {
			my ($f,$txt)=split(/=/,$img);
			if ($f =~ /^[0-9]+$/) {
				$mid = $f;
			} else {
				$mdata = file_to_mediaid( $f );
				$mid = $mdata->{media_id};
			}
			$mstr = sprintf("%s", $mid);
			if ($v>0) {
				printf " media_id %s from %s\n", $mstr, $f;
			}
			push @ids, $mstr;
			# XXX make conditional
			if (defined($txt)) {
				set_alt_text( $mid, $txt );
			}
		}
		my $media = {
			media_ids => [ @ids ],
		};
		$req->{media} = $media;
	}
	# $req->{for_super_followers_only} = "true";
	# $req->{reply_settings} = "mentionedUsers";
	# $req->{geo} = $geoobj; ?
	# $req->{geo}->{place_id} = $geo_place_id;

	# media | poll | quote
	# $req->{poll} = $poll;

	my $uinfo = uinfo();
	my $uname = $uinfo->{username};
	#print "uinfo: ".Dumper($uinfo);
	# see json/uinfo.json

	if ($v>0) {
		print "POST v2 tweets .. payload: \n";
		print Dumper($req);
	}
	retrypost:
	my ($data, $c, $checkpost);
	$skipeval = 1; # for nested eval skip below
	eval {
		($data, $c) = post_callv2("posts", $req);
	};
	$skipeval = 0; # undo skip for other calls
	if (!defined $c) {
		$c = $client->{2}->{_last_context};
	}
	if ($@) {
		if (!defined $req->{"community_id"}) {
			$checkpost = $opt_W;
		}
		if (!defined $checkpost) {
			# XXX instead of this + skipeval, pass a function to the call eventually
			if (defined $c) {
				my $lims = parse_limits($c);
				foreach my $lim (keys %{ $lims }) {
					if ($lims->{$lim}->{remaining} < 1) {
						wait_till($lims->{$lim}->{reset});
						goto retrypost;
					}
				}
			}
			die "post_callv2(tweets, ...): $@";
		}
	}
	if (defined $checkpost) {
		my $call = "posts/${checkpost}?tweet.fields=community_id";
		($data, $c) = xv2("get", $call);
		my $cid = $data->{data}->{community_id};
		if (!defined $cid) {
			print "Check post $checkpost returned:\n";
			print Dumper($data);
			exit(1);
		}
		$req->{"community_id"} = $cid;
		goto retrypost;
	}
	my $postid = $data->{data}->{id};
	my $txt = $data->{data}->{text};
	print "https://x.com/${uname}/status/${postid} \"${txt}\"\n";
	show_rates();
	#print "post.tweets.<msg> c: ".Dumper($c);
	# see json/post.tweets.msg.json
	exit(0);
}

if (defined($opt_B)) {
	my $postid = $opt_B;
	my $req = { tweet_id => $postid };
	my $payload = { };
	$payload->{"-to_json"} = $req;

	my $uid = uinfo()->{id};
	my ($data, $c) = xv2("post", "users/$uid/bookmarks", $payload);
	print Dumper(($data,$c));
	show_rates();
	exit(0);
}
if (defined($opt_d)) {
	my $uid = $opt_d;
	my $msg = $ARGV[0];
	my $req = { text => $msg };
	my $payload = { };
	$payload->{"-to_json"} = $req;
	my ($data,$c) = xv2("post", "dm_conversations/with/${uid}/messages", $payload);
	print Dumper(($data,$c));
	show_rates();
	exit(0);
}
if (defined($opt_p)) {
	my ($call,@payloads) = split(/;/,$opt_p);
	my $req = { };
	foreach my $part ( @payloads ) {
		my ($var,$val) = split(/=/,$part);
		$req->{$var} = $val;
	}
	my ($data, $c) = post_callv2($call,$req);
	show_rates();
	exit(0);
}
sub post_callv2 {
	my ($call,$req) = @_;
	my $payload = { };
	$payload->{"-to_json"} = $req;
	if ($v>0) {
		print "$call payload = ".Dumper($payload);
	}
	my ($data, $c) = xv2("post", $call, $payload);
	if ($v>0) {
		print Dumper(($data,$c));
	}
	return ($data,$c);
}
	

my $who = $ARGV[0];
if (!defined($who)) {
	die "need a username on cli";
}

if (defined($opt_S)) {
	foreach my $who (@ARGV) {
		show_ustats($who);
	}
	show_rates();
	exit(0);
}

my $maxres = $opt_r;

# Seriously, the api can't do < 5. So request 5, and count 'm ourself.
if ($maxres < 5) {
	$maxres = 5;
}
# rather than error out, cap it at max.
# XXX in the future, consider repeat querying for 100?
if ($maxres > 100) {
	$maxres = 100;
}

if ($opt_L>0) {
	show_owned_lists($who);
	show_rates();
	exit(0);
}

my $data = getuser_byname($who);
my $id = $data->{id};


our $tweetfields = "tweet.fields=author_id,";
$tweetfields .= "created_at,";
#$tweetfields .= "context_annotations,"; # what concepts 
$tweetfields .= "entities,";
$tweetfields .= "public_metrics,";
#$tweetfields .= "non_public_metrics,"; # be sure to only enable this on posts I actually sent myself
$tweetfields .= "referenced_tweets,";
$tweetfields .= "in_reply_to_user_id,";
$tweetfields .= "conversation_id";

my ($posts, $context) = xv2("get","users/${id}/tweets".
	"?${tweetfields}".
	"&expansions=author_id,entities.mentions.username,in_reply_to_user_id,referenced_tweets.id,attachments.media_keys".
	"&media.fields=url,variants,media_key,type".
	"&max_results=${maxres}");
our $shown = 1;
if ($v > 0) {
	$shown = 0;
}
if (!defined($posts)) {
	diestat("posts for $id returned undef");
}
if (! defined($opt_q)) {
	print expand_tweet(0, $posts);
}

show_rates();
1;

sub umcache_read {
	my ($var) = @_;

	return cache_read('u',$var);
}
sub umcache_write {
	my ($data) = @_;

	my $id = $data->{id};
	my $who = $data->{username};
	print "umcache miss ${who}"."[$id]\n";

	#print "user: ".Dumper($user);

	# double mem use but easier lookup

	cache_write('u', $id, $data);
	cache_write('u', $who, $data);
}

sub cache_read {
	my ($cname, $var) = @_;

	my $data = $gc->{$cname}->{$var};
	if (!defined($data)) {
		$data = read_from_cache("${cname}.${var}");
	}
	return $data;

}
sub cache_write {
	my ($cname, $var, $val) = @_;
	$gc->{$cname}->{$var} = $val;
	write_to_cache("${cname}.${var}", $val);
}

sub init_fields {
	$fields = { };
	$fields->{u} = "";
	$fields->{u} .= "connection_status,";
	$fields->{u} .= "created_at,";
	$fields->{u} .= "description,";
	$fields->{u} .= "entities,";
	$fields->{u} .= "id,";
	$fields->{u} .= "location,";
	$fields->{u} .= "most_recent_tweet_id,";
	$fields->{u} .= "name,";
	$fields->{u} .= "pinned_tweet_id,";
	$fields->{u} .= "profile_banner_url,";
	$fields->{u} .= "profile_image_url,";
	$fields->{u} .= "protected,";
	$fields->{u} .= "public_metrics,";
	$fields->{u} .= "receives_your_dm,";
	$fields->{u} .= "subscription_type,";
	$fields->{u} .= "url,";
	$fields->{u} .= "username,";
	$fields->{u} .= "verified,";
	$fields->{u} .= "verified_type,";
	$fields->{u} .= "withheld&expansions=most_recent_tweet_id,";
	$fields->{u} .= "pinned_tweet_id";

	$fields->{t} = "";
	$fields->{t} .= "article,";
	$fields->{t} .= "attachments,";
	$fields->{t} .= "author_id,";
	$fields->{t} .= "card_uri,";
	$fields->{t} .= "context_annotations,";
	$fields->{t} .= "community_id,";
	$fields->{t} .= "conversation_id,";
	$fields->{t} .= "created_at,";
	$fields->{t} .= "display_text_range,";
	$fields->{t} .= "edit_controls,";
	$fields->{t} .= "edit_history_tweet_ids,";
	$fields->{t} .= "entities,";
	$fields->{t} .= "geo,";
	$fields->{t} .= "id,";
	$fields->{t} .= "in_reply_to_user_id,";
	$fields->{t} .= "lang,";
	$fields->{t} .= "media_metadata,";
	$fields->{t} .= "note_tweet,";
	$fields->{t} .= "possibly_sensitive,";
	$fields->{t} .= "public_metrics,";
	$fields->{t} .= "referenced_tweets,";
	$fields->{t} .= "reply_settings,";
	$fields->{t} .= "scopes,";
	$fields->{t} .= "source,";
	$fields->{t} .= "text,";
	$fields->{t} .= "withheld";
	# logic this for only my tweets
	#$fields->{t} .= "promoted_metrics,";
	#$fields->{t} .= "non_public_metrics,";
	#$fields->{t} .= "organic_metrics,";
}

sub uinfo {
	my $me = get_creds();
	my $uc = cache_read('u',$me->{screen_name});
	if (defined($uc)) {
		return $uc;
	}

	my $ufields = $fields->{u};

	my $tfields = $fields->{t};

	my ($data, $c) = xv2("get", "users/me?".
		"user.fields=$ufields&".
		"tweet.fields=$tfields");
	umcache_write($data->{data});
	return $data->{data};
}

sub getuser_byname {
	my ($who) = @_;

	my $data = cache_read('u',$who);
	if (defined($data)) {
		#print "ucache hit  ".$data->{id}."\n";
		return $data;
	}

	# cache the who -> id somewhere persistent to reduce api calls
	my ($res,$c) = xv2("get","users/by/username/$who");
	if (!defined($res)) {
		diestat("empty result querying $who");
	}
	$data = $res->{data};
	if (!defined($data)) {
		diestat("empty data ".Dumper($res));
	}
	if (!defined($data->{id})) {
		print "ENOID: ";
		diestat(Dumper($data));
	}
	if ($v>0) {
		print Dumper($data);
	}
	umcache_write($data);

	return $data;
}
sub getuser_byid {
	my ($id) = @_;

	my $data = cache_read('u',$id);
	if (defined($data)) {
		#print "ucache hit  ".$data->{id}."\n";
		return $data;
	}
	my $c;
	($data, $c) = xv2("get","users/${id}");
	$data = $data->{data};

	umcache_write($data);

	return $data;
}

sub getmedia_bykey {
	my ($mkey) = @_;

	my $media = $mmemcache->{$mkey};
	if (defined($media)) {
		return $media;
	}

	# XXX to finish
}

sub expand_tweet {
	my ($level, $posts) = @_;

	my $returnstr = "";

	my $spacecount = $level * 4+1;
	my $prestr = sprintf "%${spacecount}s", $level;

	if ($v > 0) {
		print "\n\nposts: ".Dumper($posts)."\n\n";
	}

	foreach my $user ( @{ $posts->{includes}->{users} } ) {
		if (defined(cache_read('u',$user->{id}))) {
			next;
		}
		umcache_write($user);
	}
	foreach my $post ( @{ $posts->{includes}->{tweets} } ) {
		#diestat(" post: ". Dumper($post));
		my $tid = $post->{id};

		foreach my $var (%{ $post }) {
			$pmemcache->{$tid}->{$var} = $post->{$var};
		}

		# 'public_metrics' => { 'like_count' => 0, 'quote_count' => 0, 'retweet_count' => 0, 'reply_count' => 2 },
		if ($opt_l>0 && $post->{public_metrics}->{like_count} > 0 && !defined($pmemcache->{$tid}->{liking_users})) {
			my $pg = "";
			my $ucount = 0;
			while(1) {
			    my ($likes,$c) = xv2("get","posts/${tid}/liking_users".
				"?max_results=100".
				#"&expansions=pinned_tweet_id".
				"&tweet.fields=conversation_id,entities,public_metrics".
				"&user.fields=public_metrics".
				$pg
			    );
			    foreach my $user (@{ $likes->{data} }) {
				$ucount++;
				    push @{$pmemcache->{$tid}->{liking_users}}, $user;
			    }
			    my $rc = $likes->{meta}->{result_count};
			    if (defined($likes->{meta}->{next_token})) {
				$pg="&pagination_token=".$likes->{meta}->{next_token};
				next;
			    }
			    $pmemcache->{$tid}->{liking_count} = $ucount;
			    last;
			}
		}
	}

	foreach my $media ( @{ $posts->{includes}->{media} } ) {
		my $mkey = $media->{media_key};

		foreach my $var (%{ $media }) {
			if (defined($mmemcache->{$mkey}->{$var})) {
				next;
			}
			$mmemcache->{$mkey}->{$var} = $media->{$var};
		}
	}

	my $tcount = 0;
	foreach my $post ( @{ $posts->{data} } ) {
		if ($tcount++ >= $opt_r) {
			last;
		}
		my $tid = $post->{id};
		my $username = getuser_byid($post->{author_id})->{username};
		my $status = "";
		my $rstr = "";
		my $text = "";
		foreach my $ref ( @{ $post->{referenced_tweets} } ) {
			my $tstr = $ref->{type};
			my $recurse = 0;
			if ($ref->{type} eq "replied_to") {
				$tstr = "Re";
				$status = "RP ";
				$recurse++;
			} elsif ($ref->{type} eq "retweeted") {
				$tstr = "Rt";
				$status = "RT ";
				$recurse++;
			} elsif ($ref->{type} eq "quoted") {
				$tstr = "Quote";
				$status = "Q ";
				$recurse++;
			} else {
				$tstr = "Unknown(type=".$ref->{type}.")";
				$status = "? ";
			}
			if ($recurse > 0) {
				my ($q,$c) = xv2("get","posts".
				    "?ids=".$ref->{id}.
				    "&expansions=author_id,entities.mentions.username,in_reply_to_user_id,referenced_tweets.id,attachments.media_keys".
				    "&${tweetfields}".
				    "&media.fields=url,variants,media_key,type"
				);
				$text .= expand_tweet($level + 1, $q );
			}
			if (length($rstr) > 0) {
				$rstr .= ", ";
			}
			$rstr .= sprintf "%s %s", $tstr, $ref->{id};
			#print "ref dump: ".Dumper($ref);
			#print "\n";
		}
		if (length($rstr)>0) {
			$rstr = ", $rstr";
		}
		my $ttext = $post->{text};
		$ttext =~ s/[\n\r\f]/ /sg;
		$ttext =~ s/\s+/ /g;
		$ttext =~ s/\&amp;/\&/g;

		$returnstr .= sprintf "%s%25s \@%s %s%s (%d%s)\n", $prestr, $post->{created_at}, $username, $status, $ttext, $tid, $rstr;
		my ($plike, $prt, $preply, $pimp, $pquote) = (
			$post->{public_metrics}->{like_count},
			$post->{public_metrics}->{retweet_count},
			$post->{public_metrics}->{impression_count},
			$post->{public_metrics}->{quote_count},
		);

		if (!defined($plike)) {
			$plike = 0;
		}
		if (!defined($prt)) {
			$prt = 0;
		}
		if (!defined($preply)) {
			$preply = 0;
		}
		if (!defined($pquote)) {
			$pquote = 0;
		}
		if (!defined($pimp)) {
			$pimp = 0;
		}
		$returnstr .= sprintf "%s%25s %d/%d/%d/%d = Like/RT/Imp/Quote count\n", $prestr, " ", $plike, $prt, $pimp, $pquote;

		foreach my $media ( @{ $post->{includes}->{media} } ) {
			$returnstr .= expand_media($prestr, $media);
		}
		foreach my $mkey (@{ $post->{attachments}->{media_keys} }) {
			#print "\nmkey: $mkey\n";
			if (!defined($mmemcache->{$mkey})) {
				print "mmemcache EEXIST for $mkey\n";
				next;
			}
			$returnstr .= expand_media($prestr, $mmemcache->{$mkey} );
		}
		my $likestr = "";
		foreach my $user (sort { $a->{username} cmp $b->{username} } @{ $pmemcache->{$tid}->{liking_users} }) {
			$likestr .= "\@".$user->{username}.", ";
		}
		if (length($likestr) > 0) {
			$likestr = "Liked by ".$pmemcache->{$tid}->{liking_count}.": ".$likestr;
			$likestr =~ s/, $//;
			$returnstr .= sprintf "%s%25s %s\n", $prestr, " ", $likestr;
		}

		$returnstr .= $text;
		#$returnstr .= "${prestr} post dump: ".Dumper($post)."\n\n";
	}

	return $returnstr;

}

sub expand_media {
	my ($prestr, $media) = @_;

	#print "\nexpand_media for mkey ".$media->{media_key}."\n";

	my $returnstr = "";
	if ($media->{type} =~ /^(photo)/) {
		$returnstr .= sprintf "%s%25s    %s\n", $prestr, " ", $media->{url};
		return $returnstr;
	}
	if ($media->{type} =~ /^(video|animated_gif)/) {
		my $vc = $media->{public_metrics}->{view_count};
		if (defined($vc)) {
			$returnstr .= sprintf "%s%25d views\n", $prestr, $vc;
		}
		foreach my $v ( @{ $media->{variants} } ) {
			$v->{content_type} =~ s/application/app/;
			my $bitrate = $v->{bit_rate};
			my $xtra = "";
			if (defined($bitrate)) {
				if ($bitrate > 0) {
					$xtra = " (bitrate: $bitrate)";
				}
			}

			$returnstr .= sprintf "%s%25s    %s%s\n", $prestr,
			    $v->{content_type}, $v->{url}, $xtra;
		}
		return $returnstr;
	}
	$returnstr .= sprintf "%s%20s    %s\n", $prestr, " ", Dumper($media);
	return $returnstr;
}
sub show_ustats {
	my ($handle) = @_;

	# https://developer.x.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username
	# epansions=pinned_tweet_id
	# user.fields=public_metrics,username,verified,verified_type,withheld,...
	my $xtra="?user.fields=public_metrics,username,verified,verified_type,withheld,url,entities,location";
	$xtra  .=",subscription_type";
	my $data = getuser_byname($handle);
	my $id = $data->{id};
	my ($res,$c) = xv2("get","users/$id$xtra","users/:id");
	if (!defined($res)) {
		diestat("empty result querying $handle");
	}
	$data = $res->{data};
	if (!defined($data)) {
		diestat("empty data ".Dumper($res));
	}
	my $verify;
	if ($data->{verified}) {
		$verify=sprintf "(%s)", $data->{verified_type};
	} else {
		$verify="";
	}
	my $url="";
	if (defined($data->{url})) {
		$url=", url ".$data->{url};
	}
	#print Dumper($data);
	my $pm=$data->{public_metrics};
	my $output = "";
	$output = sprintf "%s%s[%d]: ", $data->{username}, $verify, $data->{id};
	$output.= sprintf " %d following, %d statuses, %d followers, %d listed%s\n",
		$pm->{following_count},
		$pm->{tweet_count},
		$pm->{followers_count},
		$pm->{listed_count},
		$url;
	if (!defined($opt_q)) {
		print $output;
	}
	if (!defined($opt_N)) {
		syslog('info', $output);
	}
	
}

sub get_creds {
	if (defined($me_glob)) {
		return $me_glob;
	}
	my $ck = "get.account.verifiy_credentials";
	my $data = read_from_cache($ck);
	if (defined($data)) {
		$me_glob = $data;
		return $me_glob;
	}
	my ($me_glob, $c) = xv1("get","account/verify_credentials");
	if ($v>0) {
		print "v1 get query=account/verify_credentials\n";
	}
	write_to_cache($ck, $me_glob);
	return $me_glob;
}


sub show_mystats {
	my $me = get_creds();
	if (defined($me) && $v > 0) {
		print Dumper($me);
	}
	my $favs = $me->{favourites_count};
	my $friends = $me->{friends_count};
	my $statuses = $me->{statuses_count};
	my $followers = $me->{followers_count};
	my $listed = $me->{listed_count};
	my $screen_name = $me->{screen_name};
	my $id = uinfo->{id};
	my $verified = uinfo()->{verified};
	my $verified_type = uinfo()->{verified_type};
	my $subscription_type = uinfo()->{subscription_type};
	if (!defined($opt_q)) {
		printf "uinfo: id=%s, verified=%s, verified_type=%s, subscription_type=%s\n",
			$id, $verified, $verified_type, $subscription_type;
	}
	my $output = "";
	$output .= sprintf "%s: ", $screen_name;
	$output .= sprintf " %d favs, %d friends, %d statuses, %d followers, %d listed\n",
		$favs, $friends, $statuses, $followers, $listed;
	if (!defined($opt_q)) {
		print $output;
	}
	if (!defined($opt_N)) {
		syslog('info', $output);
	}
	#print Dumper($me)."\n";
	if ($v<1) {
		return;
	}

	# seems this is unlimited calls?
	($data, $c) = xv1("get","account/settings");
	my $seen = { };
	foreach my $v (('allow_contributor_request', 'allow_dms_from',
		'language')) {
		$seen->{$v} = 1;
		print "Account $v: ".$data->{$v}, "\n";
	}
	foreach my $v (sort keys %{$data}) {
		if (defined($seen->{$v})) {
			next;
		}
		if (defined($data->{$v}) && ref($data->{$v}) eq "") {
			print "Account $v= ".$data->{$v}."\n";
			next;
		}
		if (ref($data->{$v}) eq "HASH") {
			my %info = %{$data->{$v}};
			foreach my $t (sort keys %info) {
				print "Account ${v}{$t}= ".$info{$t}."\n";
			}
			next;
		}
		print " data->{$v} is a ".ref($data->{$v}).": ";
		print Dumper($data->{$v})."\n";
	}
}
sub show_owned_lists {
	my ($handle) = @_;

	my $data;
	$data = getuser_byname($handle);
	my $id = $data->{id};


	($data, $c) = xv2("get", "users/${id}/owned_lists", "users/:id/owned_lists");
	if ($v>0) {
		print "owned lists: ", Dumper($data), "\n\n";
	}
	foreach my $d (@{ $data->{data} }) {
		printf "%20d %s\n", $d->{id}, $d->{name};
	}
}

sub show_bookmarks {

	my ($data, $c);

	my $id = uinfo()->{id};
	my $maxres=100;
	($data, $c) = xv2("get", "users/${id}/bookmarks", "users/:id/bookmarks");
		# "?max_results=${maxres}&id=${id}");
	print "bookmarks: ", Dumper($data), "\n\n";
}

sub diestat {
	my ($string) = @_;

	print STDERR $string;
	print STDERR "\n";
	show_rates();
	exit(1);
}
sub show_rates {
	if (defined($opt_q)) {
		return;
	}
}

sub xv1 {
	my ($type, $query, $pdata) = @_;

	return _call(1, $type, $query, $pdata);
}

sub xv2 {
	my ($type, $query, $pdata) = @_;

	return _call(2, $type, $query, $pdata);
}

sub _call {
	my ($ver, $type, $query, $pdata) = @_;
	if ($v>0) {
		print "v$ver $type query=${query}\n";
	}
	my ($data, $c);

	# try to pace
	# XXX read cache for limits
	if (0) {
		my $ph; # placeholder
		my $rem = $smemcache->{$ph}->{last}->{rlrem};
		my $res = $smemcache->{$ph}->{last}->{rlres};
		if (defined($rem) && defined($res)) {
			if ($rem < 1) {
				wait_till($res);
			} else {
				wait_till($res/2);
			}
		}
	}

	retry:
	if ($type eq "get") {
		eval {
			($data, $c) = $client->{$ver}->get($query);
		};
		my $lc = $client->{$ver}->{_last_context};
		if ($v>0) {
			print "data: ".Dumper($data);
			print "c: ".Dumper($c);
			print "client->lastcontext: ".Dumper($lc)."\n";
		}
		if (!defined $c && defined $lc) {
			$c = $lc;
		}
		if ($@) {
			if (defined $c) {
				my $lims = parse_limits($c);
				foreach my $lim (keys %{ $lims }) {
					if ($lims->{$lim}->{remaining} < 1) {
						wait_till($lims->{$lim}->{reset});
						goto retry;
					}
				}
			}
			if (defined($data) && $v>0) {
				print Dumper($data);
			}
			diestat("_call($ver,$type,$query):\n$@");
		}
		return ($data, $c);
	}
	if ($type eq "post") {
		if ($skipeval > 0) {
			($data, $c) = $client->{$ver}->post($query, $pdata);
		} else {
			eval {
				($data, $c) = $client->{$ver}->post($query, 
					$pdata
				);
			};
		}
		if ($v>0) {
			print "data: ".Dumper($data)."\n";
			print "c: ".Dumper($c)."\n";
			print "client->lastcontext: ".Dumper($client->{$ver}->{_last_context})."\n";
		}
		if ($@) {
			diestat("_call($ver,$type,$query):\n$@");
		}
		return ($data, $c);
	}
			
	diestat("_call($ver, '${type}', $query): unhandled type");
}

sub wait_till {
	my ($reset) = @_;

	my $now = strftime( "%s", localtime());
	my $res = strftime( "%s", localtime($reset));
	my $rhu = strftime( "%Y%m%d %H:%M:%S", localtime($reset));
	if ($res <= $now) {
		return;
	}
	printf STDERR "\nwait_till waiting %ds until %s", $res - $now, $rhu;
	sleep($res - $now); # should we +1 to not be too fast?
	printf STDERR " done.\n";
}

sub file_to_mediaid {
	my ($file) = @_;

	open(FH, "<", $file);
	my $sha = Digest::SHA1->new;
	$sha->addfile(*FH);
	close(FH);

	my $filesha = $sha->hexdigest;
	my $data = read_from_cache($filesha, 0);
	if (defined($data)) {
		return $data;
	}

	my $mti = {
		'JPEG format' => 'image/jpeg',
		'JFIF format' => 'image/jpeg',
		'PNG format'  => 'image/png',
		'Portable Network Graphics' => 'image/png',
		'GIF format'  => 'image/gif',
		'CompuServe graphics interchange format' => 'image/gif',
		'ASCII Text' => 'text/plain',
		'Portable Document Format' => 'application/pdf',
	};

	# verified not supported
	#	'X pixmap' => 'image/x-xpixmap',

	my $img = Graphics::Magick->new;

	my $status = $img->Read($file);
	if ($status) {
		if ($status =~ /^Exception 420/) {
			# detect video and do https://developer.x.com/en/docs/twitter-api/v1/media/upload-media/uploading-media/chunked-media-upload
			$data = video_to_mediaid( $file );
			write_to_cache($filesha, $data);
			return $data;
		}
	}
	warn $status if "$status";
	my $format = $img->Get('format');
	if (defined($format)) {
		print "format=$format for $file\n";
	}
	my $mt;
	if (defined($format)) {
		foreach my $f (keys %{ $mti }) {
			if ($format =~ /$f$/) {
				$mt = $mti->{$f};
			}
		}
	}
	if (!defined($mt)) {
		diestat("file_to_mediaid($file) format='$format' unsupported");
	}
	my ($media_data) = $img->ImageToBlob();
	my $encoded_image = encode_base64($media_data);
	my $payload = {
		media_type => $mt,
		media_data => $encoded_image,
		media_category => ($mt eq "image/gif") ? 'tweet_gif' : 'tweet_image',
	};
	if ($v>1) {
		print "payload: ".Dumper($payload);
	}
	my $query = $client->{1}->upload_url_for('media/upload');
	eval {
		($data, $c) = $client->{1}->request(post => $query, $payload);
	};
	if ($@) {
		diestat("xv1($query):\n$@");
	}
	#print "post.media.upload: data ".Dumper($data);
	#print "post.media.upload: c ".Dumper($data);
	# see json/post.media.upload.data.json for both
	printf "mid %d from %s %dx%d %s\n", $data->{media_id}, 
		$file,
		$data->{image}->{h},
		$data->{image}->{w},
		$data->{image}->{image_type};
	write_to_cache($filesha, $data);
	return $data;
}
sub write_magic {
	my ($mfile) = @_;
	open(I,'<','/etc/magic');
	open(O,'>',$mfile);
	while(<I>) {
		next if /^#/;
		next if /:(ext|mime|apple|strength)/i;
		next if /(ustring|bequad)/;
		print O $_;
	}
	close(I);
	close(O);
}
sub check_vid_mime_type {
	my ($file) = @_;

	if (!defined $magic) {
		my $mfile = "$cachedir/magic";
		if (! -f $mfile) {
			write_magic($mfile);
		}
		$magic = File::MMagic->new($mfile);
	}
	my $mime_type = $magic->checktype_filename($file);

	my $mtypes = { 
		'Macromedia Flash Video' => 'application/x-shockwave-flash',
		'MP4 Base Media' => 'video/mp4',
		'QuickTime movie' => 'video/quicktime',
		'Microsoft ASF' => 'video/x-ms-asf',
		', AVI,' => 'video/ms-video',
		'MPEG sequence' => 'video/mpeg',
		'WAVE audio' => 'audio/x-wav',
	};
	foreach my $m (keys %{$mtypes}) {
		if ($mime_type =~ /${m}/) {
			return $mtypes->{$m};
		}
	}

	diestat("unknown: ${mime_type}");
}
sub video_to_mediaid {
	my ($file) = @_;

	my $mtype = check_vid_mime_type($file);
	printf "mtype = '%s'\n", $mtype;
	my $chunk_size = 4 * 1024 * 1024; # 1mb, max 5mb
	if (defined($opts->{chunksize})) {
		$chunk_size = $opts->{chunksize};
	}
	my @stats = stat($file);
	my $size = $stats[7];
	my $cdata = chunk_init($mtype, $size);
	#print "video_to_mediaid: init cdata ".Dumper($cdata);
	#printf "video_to_mediaid(%s) media_key = '%s', media_id = '%s'\n", $file, $cdata->{media_key}, $cdata->{media_id};
	my $expiration = time() + $cdata->{expires_after_secs} - 1;
	my $mid = $cdata->{media_id};

	open(my $fh, '<:raw', $file) or die "video_to_mediaid: Cannot open $file: $!";
	binmode $fh;
	my $chunk = '';
	my $chunk_num = 0;
	my $chunk_sent = 0;
	while(read($fh, $chunk, $chunk_size) != 0) {
		$cdata = chunk_append($mid, $chunk, $chunk_num++);
		$chunk_sent += length($chunk);
	}
	close($fh);
	$cdata = chunk_finalize($mid);
	chunk_check_status($cdata);
	return $cdata;
}

# https://developer.x.com/en/docs/x-api/v1/media/upload-media/uploading-media/media-best-practices
sub chunk_init {
	my ($type, $size) = @_;
	printf "chunk_init(%s, %d)\n", $type, $size;

	my $payload = { };
	$payload->{'command'} = "INIT";
	$payload->{'media_type'} = $type;
	$payload->{'media_category'} = 'tweet_video';
	$payload->{'total_bytes'} = $size;

	my $query = $client->{1}->upload_url_for('media/upload');
	eval {
		($data, $c) = $client->{1}->request(post => $query, $payload);
	};
	if ($@) {
		diestat("chunk_init: client->{1}($query, { media_type => $type, total_bytes => $size }: $@");
	}
	return $data;
}
sub chunk_append {
	my ($mid, $chunk, $chunk_num) = @_;
	printf "chunk_append(%s, len(chunk)=%d, %s)\n", $mid, length($chunk), $chunk_num;

	my $payload = { };
	$payload->{'command'} = "APPEND";
	$payload->{'media_id'} = $mid;
	$payload->{'segment_index'} = $chunk_num;
	$payload->{'media_data'} = encode_base64($chunk);


	my $query = $client->{1}->upload_url_for('media/upload');
	eval {
		($data, $c) = $client->{1}->request(post => $query, $payload);
	};
	if ($@) {
		diestat("chunk_append: client->{1}($query, { media_id => $mid, segment_index => ${chunk_num} }: $@");
	}
	return $data;
}
sub chunk_finalize {
	my ($mid) = @_;
	printf "chunk_finalize(%s)\n", $mid;

	my $payload = { };
	$payload->{'command'} = "FINALIZE";
	$payload->{'media_id'} = $mid;

	my $query = $client->{1}->upload_url_for('media/upload');
	eval {
		($data, $c) = $client->{1}->request(post => $query, $payload);
	};
	if ($@) {
		diestat("chunk_finalize: client->{1}($query, { media_id => $mid }: $@");
	}
	#print "video_to_mediaid: finalize cdata ".Dumper($data);
	return $data;
}
sub chunk_check_status {
	my ($data) = @_;

	my $pi = $data->{'processing_info'};

	if (!defined($pi)) {
		print "chunk_check_status no pi? dumping data: ".Dumper($data);
		return;
	}
	my $query = $client->{1}->upload_url_for('media/upload');
	while (1)
	{
		printf "chunk_check_status: %s, sleep %ds\n", $pi->{state}, $pi->{'check_after_secs'};
		sleep($pi->{'check_after_secs'} * 2);
		my $payload = { };
		$payload->{'command'} = "STATUS";
		$payload->{'media_id'} = $data->{media_id};

		eval {
			($data, $c) = $client->{1}->request(get => $query, $payload);
		};
		if ($@) {
			my $msg = sprintf("chunk_check_status: state=%s, check_after_secs=%s: $@\n",
				$data->{'processing_info'}->{state},
				$data->{'processing_info'}->{'check_after_secs'},
			);
			diestat($msg);
		}
		$pi = $data->{'processing_info'};
		if ($pi->{state} =~ /^(failed|succeeded)/) {
			last;
		}
	}

}

sub like {
	my (@args) = @_;
	if (!defined($args[0])) {
		die "called like with no post to like";
	}
	my $payload = { };
	$payload->{"-to_json"}->{tweet_id} = $args[0];
	if ($v>0) {
		print "like payload = { ".Dumper($payload)." }\n";
	}
	my $uid = uinfo()->{id};
	($data, $c) = xv2("post", "users/${uid}/likes", $payload);
	print Dumper($data);
}
sub desc {
	my (@args) = @_;
	if (!defined($args[0])) {
		die "called desc with no args";
	}
	my ($mid, $text) = @args;
	set_alt_text($mid, $text);
}
sub set_alt_text {
	my ($mid, $text) = @_;

	if (length($text) > 1000) {
		printf "Alt text for media_id %d is %d bytes:\n", $mid, length($text);
		printf "   '%s'\n", $text;
		# verified as of 20240805 11:26:42 enforced
		return;
	}

	my $params = {
		media_id => "${mid}",
		alt_text => {
			text => "${text}",
		},
	};
	my $payload->{"-to_json"} = $params;
	($data, $c) = xv1("post", "media/metadata/create", $payload,
		"media/metadata/create");
	#print "post.media.metadata.create: data ".Dumper($data);
	# surprisingly, $VAR = ''
	#print "post.media.metadata.create: c ".Dumper($c);
	# see json/post.media.metadata.create.c.json
	if ($v>1) {
		print "media/metadata/create result:\n".Dumper($data);
	}
}
sub key_to_cache_filename {
	my ($key) = @_;
	my $filename = $cachedir."/".sha1_hex($key);
	return $filename;
}
sub write_to_cache {
	my ($key, $data) = @_;
	my $filename = key_to_cache_filename($key);
	if (!defined($data)) {
		printf "Cache but no data %d\n", $filename;
		return;
	}

	if (!defined($opt_q)) {
		print "Cache write $filename ($key)\n";
	}
	open my $fh, '>', $filename or die "Could not open file '$filename': $!";
	print $fh Storable::nfreeze($data);
	close $fh;
}
sub read_from_cache {
	my ($key, $ttl) = @_;
	my $filename = key_to_cache_filename($key);
	if (!defined($ttl)) {
		$ttl = 3600;
	}
	if (!-e $filename) {
		return undef;
	}
	if ($ttl != 0) {
		if ( (time - (stat($filename))[9]) > $ttl) {
			unlink($filename);
			return undef;
		}
	}
	my $fh;
	if (!open($fh, '<', $filename)) {
		#if ($v>1) {
			warn "Could not open file '$filename': $!";
		#}
		return undef;
	}
	if ($v>0) {
		print "Cache read $filename ($key)\n";
	}
	local $/ = undef;  # Read the entire file at once
	my $data = Storable::thaw(<$fh>);
	close $fh;
	if ($v>0) {
		print "read_from_cache($key) success!\n";
	}
	return $data;
}
sub parse_limits {
	my ($c) = @_;

	my $lims = { };
	if ($v>0) {
		print STDERR "Headers:\n";
	}
	my $resp = $c->http_response;
	foreach my $h ($resp->header_field_names) {
		my $val = $resp->header($h);
		if (! defined $val) {
			next;
		}
		if ($h =~ /x-(.*)-(limit|remaining|reset)/i) {
			my $lim = $1;
			my $ltype = lc($2);
			if ($v>0) {
				printf STDERR "\t.. %s .. %s\n", $lim, $ltype;
			}
			$lims->{$lim}->{$ltype} = $val;
		}
		if ($v>0) {
			printf STDERR "\t%s = '%s'\n", $h, $resp->header($h);
		}
	}
	if ($v>0) {
		print STDERR "\n";
	}
	return $lims;
}
