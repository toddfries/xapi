#!/usr/bin/perl

# Copyright (c) 2022 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use utf8;
use open qw/:std :utf8/;

use Data::Dumper;
use Date::Manip;
use Getopt::Std;
use POSIX qw(strftime);
use ReadConf;
use Sys::Syslog;
use Twitter::API;

my $ident = "Xposts";
my $logopt = 'pid';
my $facility = 'user';

our $opt_b; # shows bookmarks
our $opt_c; # config file
our $opt_j; # arbitrary query to get json output
our $opt_l; # chase likes
our $opt_r; # desired resutls count
our $opt_s; # show users profile stats
our $opt_S; # show users profile stats
our $opt_T; # show an individual post
our $opt_v; # verbosity
our $opt_L; # show owned lists

# defaults
$opt_b = 0;
$opt_c = $ENV{HOME}."/.config/xapi/xapi.conf";
$opt_l = 0;
$opt_L = 0;
$opt_r = 10;
$opt_s = 0;
$opt_v = 0;

getopts('bc:j:lr:svST:L');

if (!defined($opt_c)) {
	die "Config file '${opt_c}' EEXIST";
}

my $rc = ReadConf->new();
my $conf = $rc->readconf($opt_c);

my $c = $conf->{creds};

if (!defined($c)) {
	die "[creds] not found in xapi.conf";
}

our $client1 = Twitter::API->new_with_traits(
	#api_version => '2',
	#api_ext	=> '',
	traits => [ qw/ApiMethods/ ],
	#traits => [ qw/Enchilada/ ],
	consumer_key	=> $c->{consumer_key},
	consumer_secret => $c->{consumer_secret},
	access_token	=> $c->{access_token},
	access_token_secret => $c->{access_token_secret},
);
our $client2 = Twitter::API->new_with_traits(
	api_version => '2',
	api_ext	=> '',
	traits => [ qw/ApiMethods/ ],
	#traits => [ qw/Enchilada/ ],
	consumer_key	=> $c->{consumer_key},
	consumer_secret => $c->{consumer_secret},
	access_token	=> $c->{access_token},
	access_token_secret => $c->{access_token_secret},
);

our $umemcache = { }; # users
our $pmemcache = { }; # posts
our $mmemcache = { }; # media
our $smemcache = { }; # stats

our $v = $opt_v;

openlog($ident, $logopt, $facility);

if ($opt_s>0) {
	show_mystats();
	show_stats();
	exit(0);
}

if (defined($opt_j)) {
	my ($data, $c) = tv2("get", $opt_j, $opt_j );
	print Dumper($data);
	show_stats();
	exit(0);
}
	
	

if ($opt_b>0) {
	show_bookmarks();
	show_stats();
	exit(0);
}

if (defined($opt_T)) {
	use Try::Tiny;
	# tweet.fields [attachments,author_id,context_annotations,conversation_id,created_at,edit_controls,edit_history_tweet_ids,entities,geo,id,in_reply_to_user_id,lang,non_public_metrics,organic_metrics,possibly_sensitive,promoted_metrics,public_metrics,referenced_tweets,reply_settings,source,text,withheld]
	my $query = "tweet.fields=withheld,geo,attachments,author_id,created_at,entities,public_metrics,context_annotations,conversation_id,lang,source,text,possibly_sensitive".
	"&expansions=author_id,entities.mentions.username,in_reply_to_user_id,referenced_tweets.id,attachments.media_keys".
	# media_fields [alt_text,duration_ms,height,media_key,non_public_metrics,organic_metrics,preview_image_url,promoted_metrics,public_metrics,type,url,variants,width]
	"&media.fields=url,variants,media_key,type,alt_text,duration_ms,public_metrics".
	# user.fields [created_at,description,entities,id,location,name,pinned_tweet_id,profile_image_url,protected,public_metrics,url,username,verified,verified_type,withheld]
	"&user.fields=username,withheld,protected,created_at,public_metrics,verified,verified_type";
	#$query = "tweet.fields=lang,author_id,attachments,created_at,public_metrics&user.fields=created_at";
	#$query = "tweet.fields=created_at&expansions=author_id&user.fields=created_at";
	foreach my $t (split(/\s+,\s+/,$opt_T)) {
		my ($tweets, $context);

		#if ($t =~ /,/) {
			($tweets, $context) = tv2("get","tweets?ids=${t}&$query");
		#} else {
		#	try {
		#		($tweets, $context) = tv2("get","tweets/${t}?${query}");
		#	}
		#	catch {
		#		print $_->http_request->as_string."\n";
		#		print "twitter error code: ".$_->twitter_error_code."\n";
		#	};
		#}
		print expand_tweet(0, $tweets);
	}
	show_stats();
	exit(0);
}
	

my $who = $ARGV[0];
if (!defined($who)) {
	die "need a username on cli";
}

if (defined($opt_S)) {
	foreach my $who (@ARGV) {
		show_ustats($who);
	}
	show_stats();
	exit(0);
}

my $maxres = $opt_r;

# Seriously, the api can't do < 5. So request 5, and count 'm ourself.
if ($maxres < 5) {
	$maxres = 5;
}
# rather than error out, cap it at max.
# XXX in the future, consider repeat querying for 100?
if ($maxres > 100) {
	$maxres = 100;
}

if ($opt_L>0) {
	show_owned_lists($who);
	show_stats();
	exit(0);
}

my $data = getuser_byname($who);
my $id = $data->{id};


our $tweetfields = "tweet.fields=author_id,";
$tweetfields .= "created_at,";
#$tweetfields .= "context_annotations,"; # what concepts 
$tweetfields .= "entities,";
$tweetfields .= "public_metrics,";
#$tweetfields .= "non_public_metrics,"; # be sure to only enable this on posts I actually sent myself
$tweetfields .= "referenced_tweets,";
$tweetfields .= "in_reply_to_user_id,";
$tweetfields .= "conversation_id";

my ($tweets, $context) = tv2("get","users/${id}/tweets".
	"?${tweetfields}".
	"&expansions=author_id,entities.mentions.username,in_reply_to_user_id,referenced_tweets.id,attachments.media_keys".
	"&media.fields=url,variants,media_key,type".
	"&max_results=${maxres}", "users/:id/tweets");
our $shown = 1;
if ($v > 0) {
	$shown = 0;
}
if (!defined($tweets)) {
	diestat("tweets for $id returned undef");
}
print expand_tweet(0, $tweets);

show_stats();
1;

sub getuser_byname {
	my ($who) = @_;

	my $data = $umemcache->{$who};
	if (defined($data)) {
		#print "ucache hit  ".$data->{id}."\n";
		return $data;
	}

	# cache the who -> id somewhere persistent to reduce api calls
	my ($res,$c) = tv2("get","users/by/username/$who","users/by/username/:username");
	if (!defined($res)) {
		diestat("empty result querying $who");
	}
	$data = $res->{data};
	if (!defined($data)) {
		diestat("empty data ".Dumper($res));
	}
	if (!defined($data->{id})) {
		print "ENOID: ";
		diestat(Dumper($data));
	}
	if ($opt_v>0) {
		print Dumper($data);
	}
	my $id = $data->{id};
	#print "ucache miss ".$data->{id}."\n";

	#print "user: ".Dumper($user);

	# double mem use but easier lookup

	$umemcache->{$id} = $data;
	$umemcache->{$who} = $data;

	return $data;
}
sub getuser_byid {
	my ($id) = @_;

	my $data = $umemcache->{$id};
	if (defined($data)) {
		#print "ucache hit  ".$data->{id}."\n";
		return $data;
	}
	my $c;
	($data, $c) = tv2("get","users/${id}","users/:id");
	$data = $data->{data};
	my $who = $data->{username};
	#print "ucache miss ".$data->{id}."\n";

	# double mem use but easier lookup

	$umemcache->{$id} = $data;
	$umemcache->{$who} = $data;

	return $data;
}

sub getmedia_bykey {
	my ($mkey) = @_;

	my $media = $mmemcache->{$mkey};
	if (defined($media)) {
		return $media;
	}

	# XXX to finish
}

sub expand_tweet {
	my ($level, $tweets) = @_;

	my $returnstr = "";

	my $spacecount = $level * 4+1;
	my $prestr = sprintf "%${spacecount}s", $level;

	if ($v > 0) {
		print "\n\ntweets: ".Dumper($tweets)."\n\n";
	}

	foreach my $user ( @{ $tweets->{includes}->{users} } ) {
		my $id = $user->{id};
		if (!defined($id)) {
			print "\n\nuser without id? ".Dumper($user)."\n\n";
			next;
		}
		my $who = $user->{username};
		if (defined($umemcache->{$id})) {
			next;
		}

		$umemcache->{$id} = $user;
		$umemcache->{$who} = $user;
	}
	foreach my $tweet ( @{ $tweets->{includes}->{tweets} } ) {
		#diestat(" tweet: ". Dumper($tweet));
		my $tid = $tweet->{id};

		foreach my $var (%{ $tweet }) {
			$pmemcache->{$tid}->{$var} = $tweet->{$var};
		}

		# 'public_metrics' => { 'like_count' => 0, 'quote_count' => 0, 'retweet_count' => 0, 'reply_count' => 2 },
		if ($opt_l>0 && $tweet->{public_metrics}->{like_count} > 0 && !defined($pmemcache->{$tid}->{liking_users})) {
			my $pg = "";
			my $ucount = 0;
			while(1) {
			    my ($likes,$c) = tv2("get","tweets/${tid}/liking_users".
				"?max_results=100".
				#"&expansions=pinned_tweet_id".
				"&tweet.fields=conversation_id,entities,public_metrics".
				"&user.fields=public_metrics".
				$pg, "tweets/:id/liking_users",
			    );
			    foreach my $user (@{ $likes->{data} }) {
				$ucount++;
				    push @{$pmemcache->{$tid}->{liking_users}}, $user;
			    }
			    my $rc = $likes->{meta}->{result_count};
			    if (defined($likes->{meta}->{next_token})) {
				$pg="&pagination_token=".$likes->{meta}->{next_token};
				next;
			    }
			    $pmemcache->{$tid}->{liking_count} = $ucount;
			    last;
			}
		}
	}

	foreach my $media ( @{ $tweets->{includes}->{media} } ) {
		my $mkey = $media->{media_key};

		foreach my $var (%{ $media }) {
			if (defined($mmemcache->{$mkey}->{$var})) {
				next;
			}
			$mmemcache->{$mkey}->{$var} = $media->{$var};
		}
	}

	my $tcount = 0;
	foreach my $tweet ( @{ $tweets->{data} } ) {
		if ($tcount++ >= $opt_r) {
			last;
		}
		my $tid = $tweet->{id};
		my $username = getuser_byid($tweet->{author_id})->{username};
		my $status = "";
		my $rstr = "";
		my $text = "";
		foreach my $ref ( @{ $tweet->{referenced_tweets} } ) {
			my $tstr = $ref->{type};
			my $recurse = 0;
			if ($ref->{type} eq "replied_to") {
				$tstr = "Re";
				$status = "RP ";
				$recurse++;
			} elsif ($ref->{type} eq "retweeted") {
				$tstr = "Rt";
				$status = "RT ";
				$recurse++;
			} elsif ($ref->{type} eq "quoted") {
				$tstr = "Quote";
				$status = "Q ";
				$recurse++;
			} else {
				$tstr = "Unknown(type=".$ref->{type}.")";
				$status = "? ";
			}
			if ($recurse > 0) {
				my ($q,$c) = tv2("get","tweets".
				    "?ids=".$ref->{id}.
				    "&expansions=author_id,entities.mentions.username,in_reply_to_user_id,referenced_tweets.id,attachments.media_keys".
				    "&${tweetfields}".
				    "&media.fields=url,variants,media_key,type","tweets",
				);
				$text .= expand_tweet($level + 1, $q );
			}
			if (length($rstr) > 0) {
				$rstr .= ", ";
			}
			$rstr .= sprintf "%s %s", $tstr, $ref->{id};
			#print "ref dump: ".Dumper($ref);
			#print "\n";
		}
		if (length($rstr)>0) {
			$rstr = ", $rstr";
		}
		my $ttext = $tweet->{text};
		$ttext =~ s/[\n\r\f]/ /sg;
		$ttext =~ s/\s+/ /g;
		$ttext =~ s/\&amp;/\&/g;

		$returnstr .= sprintf "%s%25s \@%s %s%s (%d%s)\n", $prestr, $tweet->{created_at}, $username, $status, $ttext, $tid, $rstr;
		my ($plike, $prt, $preply, $pimp, $pquote) = (
			$tweet->{public_metrics}->{like_count},
			$tweet->{public_metrics}->{retweet_count},
			$tweet->{public_metrics}->{impression_count},
			$tweet->{public_metrics}->{quote_count},
		);

		if (!defined($plike)) {
			$plike = 0;
		}
		if (!defined($prt)) {
			$prt = 0;
		}
		if (!defined($preply)) {
			$preply = 0;
		}
		if (!defined($pquote)) {
			$pquote = 0;
		}
		if (!defined($pimp)) {
			$pimp = 0;
		}
		$returnstr .= sprintf "%s%25s %d/%d/%d/%d = Like/RT/Imp/Quote count\n", $prestr, " ", $plike, $prt, $pimp, $pquote;

		foreach my $media ( @{ $tweet->{includes}->{media} } ) {
			$returnstr .= expand_media($prestr, $media);
		}
		foreach my $mkey (@{ $tweet->{attachments}->{media_keys} }) {
			#print "\nmkey: $mkey\n";
			if (!defined($mmemcache->{$mkey})) {
				print "mmemcache EEXIST for $mkey\n";
				next;
			}
			$returnstr .= expand_media($prestr, $mmemcache->{$mkey} );
		}
		my $likestr = "";
		foreach my $user (sort { $a->{username} cmp $b->{username} } @{ $pmemcache->{$tid}->{liking_users} }) {
			$likestr .= "\@".$user->{username}.", ";
		}
		if (length($likestr) > 0) {
			$likestr = "Liked by ".$pmemcache->{$tid}->{liking_count}.": ".$likestr;
			$likestr =~ s/, $//;
			$returnstr .= sprintf "%s%25s %s\n", $prestr, " ", $likestr;
		}

		$returnstr .= $text;
		#$returnstr .= "${prestr} tweet dump: ".Dumper($tweet)."\n\n";
	}

	return $returnstr;

}

sub expand_media {
	my ($prestr, $media) = @_;

	#print "\nexpand_media for mkey ".$media->{media_key}."\n";

	my $returnstr = "";
	if ($media->{type} =~ /^(photo)/) {
		$returnstr .= sprintf "%s%25s    %s\n", $prestr, " ", $media->{url};
		return $returnstr;
	}
	if ($media->{type} =~ /^(video|animated_gif)/) {
		my $vc = $media->{public_metrics}->{view_count};
		if (defined($vc)) {
			$returnstr .= sprintf "%s%25d views\n", $prestr, $vc;
		}
		foreach my $v ( @{ $media->{variants} } ) {
			$v->{content_type} =~ s/application/app/;
			my $bitrate = $v->{bit_rate};
			my $xtra = "";
			if (defined($bitrate)) {
				if ($bitrate > 0) {
					$xtra = " (bitrate: $bitrate)";
				}
			}

			$returnstr .= sprintf "%s%25s    %s%s\n", $prestr,
			    $v->{content_type}, $v->{url}, $xtra;
		}
		return $returnstr;
	}
	$returnstr .= sprintf "%s%20s    %s\n", $prestr, " ", Dumper($media);
	return $returnstr;
}
sub show_ustats {
	my ($handle) = @_;

	# https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username
	# epansions=pinned_tweet_id
	# user.fields=public_metrics,username,verified,verified_type,withheld,...
	my $xtra="?user.fields=public_metrics,username,verified,verified_type,withheld,url,entities,location";
	my ($res,$c) = tv2("get","users/by/username/$handle$xtra","users/by/username/:handle");
	if (!defined($res)) {
		diestat("empty result querying $handle");
	}
	$data = $res->{data};
	if (!defined($data)) {
		diestat("empty data ".Dumper($res));
	}
	my $verify;
	if ($data->{verified}) {
		$verify=sprintf "(%s)", $data->{verified_type};
	} else {
		$verify="";
	}
	my $url="";
	if (defined($data->{url})) {
		$url=", url ".$data->{url};
	}
	#print Dumper($data);
	my $pm=$data->{public_metrics};
	my $output = "";
	$output = sprintf "%s%s[%d]: ", $data->{username}, $verify, $data->{id};
	$output.= sprintf " %d following, %d statuses, %d followers, %d listed%s\n",
		$pm->{following_count},
		$pm->{tweet_count},
		$pm->{followers_count},
		$pm->{listed_count},
		$url;
	print $output;
	syslog('info', $output);
	
}

sub show_mystats {
	my ($me, $c) = $client1->verify_credentials;
	if ($opt_v>0) {
		print "query=account/verify_credentials\n";
	}
	save_rates("account/verify_credentials", $c);
	if (defined($me) && $opt_v > 0) {
		print Dumper($me);
	}
	my $favs = $me->{favourites_count};
	my $friends = $me->{friends_count};
	my $statuses = $me->{statuses_count};
	my $followers = $me->{followers_count};
	my $listed = $me->{listed_count};
	my $screen_name = $me->{screen_name};
	my $output = "";
	$output .= sprintf "%s: ", $screen_name;
	$output .= sprintf " %d favs, %d friends, %d statuses, %d followers, %d listed\n",
		$favs, $friends, $statuses, $followers, $listed;
	print $output;
	syslog('info', $output);
	#print Dumper($me)."\n";
	if ($v<1) {
		return;
	}

	# seems this is unlimited calls?
	($data, $c) = tv1("get","account/settings");
	save_rates("account/settings", $c);
	my $seen = { };
	foreach my $v (('allow_contributor_request', 'allow_dms_from',
		'language')) {
		$seen->{$v} = 1;
		print "Account $v: ".$data->{$v}, "\n";
	}
	foreach my $v (sort keys %{$data}) {
		if (defined($seen->{$v})) {
			next;
		}
		if (defined($data->{$v}) && ref($data->{$v}) eq "") {
			print "Account $v= ".$data->{$v}."\n";
			next;
		}
		if (ref($data->{$v}) eq "HASH") {
			my %info = %{$data->{$v}};
			foreach my $t (sort keys %info) {
				print "Account ${v}{$t}= ".$info{$t}."\n";
			}
			next;
		}
		print " data->{$v} is a ".ref($data->{$v}).": ";
		print Dumper($data->{$v})."\n";
	}
}
sub show_owned_lists {
	my ($handle) = @_;

	my $data;
	$data = getuser_byname($handle);
	my $id = $data->{id};


	($data, $c) = tv2("get", "users/${id}/owned_lists", "users/:id/owned_lists");
	#print "owned lists: ", Dumper($data), "\n\n";
	foreach my $d (@{ $data->{data} }) {
		printf "%20d %s\n", $d->{id}, $d->{name};
	}
}

sub show_bookmarks {

	my ($data, $c);
	# unlimited calls!
	($data, $c) = tv2("get", "users/me", "users/me" );
	print "users/me: ", Dumper($data), "\n\n";

	my $id = $data->{data}->{id};
	my $maxres=100;
	($data, $c) = tv2("get", "users/${id}/bookmarks", "users/:id/bookmarks");
		# "?max_results=${maxres}&id=${id}");
	print "bookmarks: ", Dumper($data), "\n\n";
}

sub save_rates {
	my ($name, $c) = @_;

	if (!defined($c) || length(ref($c)) < 1) {
		return;
	}
	if (! (ref($c) eq "Twitter::API::Context") ) {
		printf "c is a %s\n", ref($c);
		return;
	}
	my ($rl, $rlrem, $rlres) = (
			$c->rate_limit,
			$c->rate_limit_remaining,
			$c->rate_limit_reset,
	);
	if (!defined($rl) || !defined($rlrem) || !defined($rlres)) {
		return;
	}
	my $nextreset = Date::Manip::Date->new();
	$nextreset->parse( "epoch $rlres" );
	if (!defined($smemcache->{$name}->{start}->{rlrem})) {
		$smemcache->{$name}->{start}->{rlrem} = $rlrem-1;
		$smemcache->{$name}->{start}->{rlres} = $rlres;
		$smemcache->{$name}->{rl} = $rl;
	}
	$smemcache->{$name}->{last}->{rlrem} = $rlrem;
	$smemcache->{$name}->{last}->{rlres} = $rlres;
	return;
}
sub diestat {
	my ($string) = @_;

	print STDERR $string;
	print STDERR "\n";
	show_stats();
	exit(1);
}
sub show_stats {
	foreach my $name (keys %{$smemcache}) {
		my $start_res = $smemcache->{$name}->{start}->{rlres};
		my $start_rem = $smemcache->{$name}->{start}->{rlrem};
		my $last_res = $smemcache->{$name}->{last}->{rlres};
		my $last_rem = $smemcache->{$name}->{last}->{rlrem};
		my $rl = $smemcache->{$name}->{rl};
		if (!defined($rl) || !defined($start_res) || !defined($start_rem)) {
			return;
		}
		printf STDERR "%50s %d to %d/%d from %s to %s\n",
			$name, $last_rem, $start_rem, $rl,
			scalar localtime $start_res,
			scalar localtime $last_res;
	}
}

sub tv2 {
	my ($type, $query, $ratename) = @_;
	if ($opt_v>0) {
		print "query=${query}\n";
	}
	my ($data, $c);

	if (defined($ratename)) {
		my $rem = $smemcache->{$ratename}->{last}->{rlrem};
		my $res = $smemcache->{$ratename}->{last}->{rlres};
		if (defined($rem) && defined($res) && $rem < 5) {
			wait_till($res);
		}
	}

	retry:
	if ($type eq "get") {
		eval {
			($data, $c) = $client2->get($query);
		};
		if ($@) {
			if (defined($c) && $c->rate_limit_remaining < 1) {
				wait_till($c->rate_limit_reset);
				goto retry;
			}
			if (defined($data) && $opt_v>0) {
				print Dumper($data);
			}
			diestat("tv2('get',$query):\n$@");
		}
		if (defined($ratename)) {
			save_rates($ratename, $c);
		}
		return ($data, $c);
	}
	diestat("tv2('${type}', $query): unhandled type");
}
sub tv1 {
	my ($type, $query) = @_;
	if ($opt_v>0) {
		print "query=${query}\n";
	}
	my ($data, $c);

	if ($type eq "get") {
		eval {
			($data, $c) = $client1->get($query);
		};
		if ($@) {
			diestat("tv1('get',$query): $@");
		}
		return ($data, $c);
	}
	diestat("tv1('${type}', $query): unhandled type");
}

sub wait_till {
	my ($reset) = @_;

	my $now = strftime( "%s", localtime);
	my $res = strftime( "%s", localtime($reset));
	if ($res <= $now) {
		return;
	}
	printf STDERR "\nwait_till waiting %ds", $res - $now;
	sleep($res - $now); # should we +1 to not be too fast?
	printf STDERR " done.\n";
}
