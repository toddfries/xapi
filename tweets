#!/usr/bin/perl

# Copyright (c) 2022 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use utf8;
use open qw/:std :utf8/;

use Data::Dumper;
use Getopt::Std;
use ReadConf;
use Twitter::API;

our $opt_c; # config file
our $opt_r; # desired resutls count
our $opt_v; # verbosity

# defaults
$opt_c = $ENV{HOME}."/.config/tapi/tapi.conf";
$opt_r = 10;
$opt_v = 0;

getopts('c:r:v');

if (!defined($opt_c)) {
	die "Config file '${opt_c}' EEXIST";
}

my $rc = ReadConf->new();
my $conf = $rc->readconf($opt_c);

my $c = $conf->{creds};

if (!defined($c)) {
	die "[creds] not found in tapi.conf";
}

our $client = Twitter::API->new_with_traits(
	api_version => '2',
	api_ext	=> '',
	traits => [ qw/ApiMethods/ ],
	consumer_key	=> $c->{consumer_key},
	consumer_secret => $c->{consumer_secret},
	access_token	=> $c->{access_token},
	access_token_secret => $c->{access_token_secret},
);

my $who = $ARGV[0];
if (!defined($who)) {
	die "need a username on cli";
}

our $umemcache = { }; # users
our $tmemcache = { }; # tweets
our $mmemcache = { }; # media

our $v = $opt_v;

my $data = getuser_byname($who);
my $id = $data->{id};

my $maxres = $opt_r;

# Seriously, the api can't do < 5. So request 5, and count 'm ourself.
if ($maxres < 5) {
	$maxres = 5;
}
# rather than error out, cap it at max.
# XXX in the future, consider repeat querying for 100?
if ($maxres > 100) {
	$maxres = 100;
}
our $tweetfields = "tweet.fields=author_id,";
$tweetfields .= "created_at,";
#$tweetfields .= "context_annotations,"; # what concepts 
$tweetfields .= "entities,";
$tweetfields .= "public_metrics,";
#$tweetfields .= "non_public_metrics,"; # be sure to only enable this on tweets I actually sent myself
$tweetfields .= "referenced_tweets,";
$tweetfields .= "in_reply_to_user_id,";
$tweetfields .= "conversation_id";
my $tweets = $client->get("users/${id}/tweets".
	"?${tweetfields}".
	"&expansions=author_id,entities.mentions.username,in_reply_to_user_id,referenced_tweets.id,attachments.media_keys".
	"&media.fields=url,variants,media_key,type".
	"&max_results=${maxres}");
our $shown = 1;
if ($v > 0) {
	$shown = 0;
}
print expand_tweet(0, $tweets);

1;

sub getuser_byname {
	my ($who) = @_;

	my $data = $umemcache->{$who};
	if (defined($data)) {
		#print "ucache hit  ".$data->{id}."\n";
		return $data;
	}

	# cache the who -> id somewhere persistent to reduce api calls
	$data = $client->get("users/by/username/$who")->{data};
	if (!defined($data)) {
		die "empty data";
	}
	if (!defined($data->{id})) {
		print "ENOID: ";
		die Dumper($data);
	}
	my $id = $data->{id};
	#print "ucache miss ".$data->{id}."\n";

	#print "user: ".Dumper($user);

	# double mem use but easier lookup

	$umemcache->{$id} = $data;
	$umemcache->{$who} = $data;

	return $data;
}
sub getuser_byid {
	my ($id) = @_;

	my $data = $umemcache->{$id};
	if (defined($data)) {
		#print "ucache hit  ".$data->{id}."\n";
		return $data;
	}

	$data = $client->get("users/${id}")->{data};
	my $who = $data->{username};
	#print "ucache miss ".$data->{id}."\n";

	# double mem use but easier lookup

	$umemcache->{$id} = $data;
	$umemcache->{$who} = $data;

	return $data;
}

sub getmedia_bykey {
	my ($mkey) = @_;

	my $media = $mmemcache->{$mkey};
	if (defined($media)) {
		return $media;
	}

	# XXX to finish
}

sub expand_tweet {
	my ($level, $tweets) = @_;

	my $returnstr = "";

	my $spacecount = $level * 4+1;
	my $prestr = sprintf "%${spacecount}s", $level;

	if ($shown++ < 1) {
		print "\n\ntweets: ".Dumper($tweets)."\n\n";
	}

	foreach my $user ( @{ $tweets->{includes}->{users} } ) {
		my $id = $user->{id};
		if (!defined($id)) {
			print "\n\nuser without id? ".Dumper($user)."\n\n";
			next;
		}
		my $who = $user->{username};
		if (defined($umemcache->{$id})) {
			next;
		}

		$umemcache->{$id} = $user;
		$umemcache->{$who} = $user;
	}
	foreach my $tweet ( @{ $tweets->{includes}->{tweets} } ) {
		my $tid = $tweet->{id};

		foreach my $var (%{ $tweet }) {
			$tmemcache->{$tid}->{$var} = $tweet->{$var};
		}

		# 'public_metrics' => { 'like_count' => 0, 'quote_count' => 0, 'retweet_count' => 0, 'reply_count' => 2 },
		if (0 && $tweet->{public_metrics}->{like_count} > 0 && !defined($tmemcache->{$tid}->{liking_users})) {
			my $likes = $client->get("tweets/${tid}/liking_users".
				"?max_results=100".
				#"&expansions=pinned_tweet_id".
				"&tweet.fields=conversation_id,entities,public_metrics".
				# if recursing because > 100 likes, uncomment and populate below:
				#"&pagination_token=".
				"&user.fields=public_metrics"
			);
			#print "${tid} likes: ".Dumper($likes);
			#print "\n";
			#exit(0);
			# XXX add to user cache?
			foreach my $user (@{ $likes->{data} }) {
				push @{$tmemcache->{$tid}->{liking_users}}, $user;
			}
		}
	}

	foreach my $media ( @{ $tweets->{includes}->{media} } ) {
		my $mkey = $media->{media_key};

		foreach my $var (%{ $media }) {
			if (defined($mmemcache->{$mkey}->{$var})) {
				next;
			}
			$mmemcache->{$mkey}->{$var} = $media->{$var};
		}
	}

	my $tcount = 0;
	foreach my $tweet ( @{ $tweets->{data} } ) {
		if ($tcount++ > $opt_r) {
			last;
		}
		my $tid = $tweet->{id};
		my $username = getuser_byid($tweet->{author_id})->{username};
		my $status = "";
		my $rstr = "";
		my $text = "";
		foreach my $ref ( @{ $tweet->{referenced_tweets} } ) {
			my $tstr = $ref->{type};
			my $recurse = 0;
			if ($ref->{type} eq "replied_to") {
				$tstr = "Re";
				$status = "RP ";
				$recurse++;
			} elsif ($ref->{type} eq "retweeted") {
				$tstr = "Rt";
				$status = "RT ";
				$recurse++;
			} elsif ($ref->{type} eq "quoted") {
				$tstr = "Quote";
				$status = "Q ";
				$recurse++;
			} else {
				$tstr = "Unknown(type=".$ref->{type}.")";
				$status = "? ";
			}
			if ($recurse > 0) {
				my $q = $client->get("tweets".
				    "?ids=".$ref->{id}.
				    "&expansions=author_id,entities.mentions.username,in_reply_to_user_id,referenced_tweets.id,attachments.media_keys".
				    "&${tweetfields}".
				    "&media.fields=url,variants,media_key,type"
				);
				$text .= expand_tweet($level + 1, $q );
			}
			if (length($rstr) > 0) {
				$rstr .= ", ";
			}
			$rstr .= sprintf "%s %s", $tstr, $ref->{id};
			#print "ref dump: ".Dumper($ref);
			#print "\n";
		}
		if (length($rstr)>0) {
			$rstr = ", $rstr";
		}
		my $ttext = $tweet->{text};
		$ttext =~ s/[\n\r\f]/ /sg;
		$ttext =~ s/\s+/ /g;
		$ttext =~ s/\&amp;/\&/g;

		$returnstr .= sprintf "%s%25s \@%s %s%s (%d%s)\n", $prestr, $tweet->{created_at}, $username, $status, $ttext, $tid, $rstr;

		foreach my $media ( @{ $tweet->{includes}->{media} } ) {
			$returnstr .= expand_media($prestr, $media);
		}
		foreach my $mkey (@{ $tweet->{attachments}->{media_keys} }) {
			#print "\nmkey: $mkey\n";
			if (!defined($mmemcache->{$mkey})) {
				print "mmemcache EEXIST for $mkey\n";
				next;
			}
			$returnstr .= expand_media($prestr, $mmemcache->{$mkey} );
		}
		my $likestr = "";
		foreach my $user (sort { $a->{username} cmp $b->{username} } @{ $tmemcache->{$tid}->{liking_users} }) {
			$likestr .= "\@".$user->{username}.", ";
		}
		if (length($likestr) > 0) {
			$likestr = "Liked by ".$likestr;
			$likestr =~ s/, $//;
			$returnstr .= sprintf "%s%25s %s\n", $prestr, " ", $likestr;
		}

		$returnstr .= $text;
		#$returnstr .= "${prestr} tweet dump: ".Dumper($tweet)."\n\n";
	}

	return $returnstr;

}

sub expand_media {
	my ($prestr, $media) = @_;

	#print "\nexpand_media for mkey ".$media->{media_key}."\n";

	my $returnstr = "";
	if ($media->{type} =~ /^(photo)/) {
		$returnstr .= sprintf "%s%25s    %s\n", $prestr, " ", $media->{url};
		return $returnstr;
	}
	if ($media->{type} =~ /^(video|animated_gif)/) {
		foreach my $v ( @{ $media->{variants} } ) {
			$v->{content_type} =~ s/application/app/;
			my $bitrate = $v->{bit_rate};
			my $xtra = "";
			if (defined($bitrate)) {
				if ($bitrate > 0) {
					$xtra = " (bitrate: $bitrate)";
				}
			}

			$returnstr .= sprintf "%s%25s    %s%s\n", $prestr,
			    $v->{content_type}, $v->{url}, $xtra;
		}
		return $returnstr;
	}
	$returnstr .= sprintf "%s%20s    %s\n", $prestr, " ", Dumper($media);
	return $returnstr;
}
